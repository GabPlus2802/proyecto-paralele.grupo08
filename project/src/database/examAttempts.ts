import { ExamAttempt } from '../types';

// Base de datos de intentos de examen (exámenes pendientes de evaluación)
export const examAttempts: ExamAttempt[] = [
  // Primeros 5 exámenes originales
  {
    id: '1',
    examId: 'exam_A',
    studentId: 'student_001',
    studentName: 'María González Pérez',
    answers: {},
    answerString: 'ACDBAXXCDAABCDEABCDE' + 'A'.repeat(80),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 1800000),
    status: 'pending',
  },
  {
    id: '2',
    examId: 'exam_C',
    studentId: 'student_002',
    studentName: 'Carlos Mendoza Silva',
    answers: {},
    answerString: 'ABCDABCDAB' + 'C'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 1500000),
    status: 'pending',
  },
  {
    id: '3',
    examId: 'exam_E',
    studentId: 'student_003',
    studentName: 'Ana Rodríguez López',
    answers: {},
    answerString: 'XCDBAECXDA' + 'E'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 1200000),
    status: 'pending',
  },
  {
    id: '4',
    examId: 'exam_D',
    studentId: 'student_004',
    studentName: 'Luis Castro Vargas',
    answers: {},
    answerString: 'ABCDEABCDE' + 'D'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 900000),
    status: 'pending',
  },
  {
    id: '5',
    examId: 'exam_A',
    studentId: 'student_005',
    studentName: 'Patricia Flores Ruiz',
    answers: {},
    answerString: 'AXXDAEXCXE' + 'A'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 600000),
    status: 'pending',
  },
  // 20 exámenes adicionales
  {
    id: '6',
    examId: 'exam_B',
    studentId: 'student_006',
    studentName: 'Roberto Sánchez Torres',
    answers: {},
    answerString: 'BXCDEBXCDE' + 'B'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 500000),
    status: 'pending',
  },
  {
    id: '7',
    examId: 'exam_A',
    studentId: 'student_007',
    studentName: 'Carmen Vásquez Morales',
    answers: {},
    answerString: 'AXBDAEXCDA' + 'A'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 450000),
    status: 'pending',
  },
  {
    id: '8',
    examId: 'exam_C',
    studentId: 'student_008',
    studentName: 'Diego Herrera Campos',
    answers: {},
    answerString: 'CXCDCXCDCX' + 'C'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 400000),
    status: 'pending',
  },
  {
    id: '9',
    examId: 'exam_A',
    studentId: 'student_009',
    studentName: 'Sofía Ramírez Delgado',
    answers: {},
    answerString: 'AABCDAABCD' + 'A'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 350000),
    status: 'pending',
  },
  {
    id: '10',
    examId: 'exam_C',
    studentId: 'student_010',
    studentName: 'Andrés Paredes Quispe',
    answers: {},
    answerString: 'CCDCXCCDCX' + 'C'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 300000),
    status: 'pending',
  },
  {
    id: '11',
    examId: 'exam_A',
    studentId: 'student_011',
    studentName: 'Valeria Núñez Espinoza',
    answers: {},
    answerString: 'AXAXAXAXAX' + 'A'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 250000),
    status: 'pending',
  },
  {
    id: '12',
    examId: 'exam_D',
    studentId: 'student_012',
    studentName: 'Javier Moreno Castillo',
    answers: {},
    answerString: 'DDXDDDXDDD' + 'D'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 200000),
    status: 'pending',
  },
  {
    id: '13',
    examId: 'exam_A',
    studentId: 'student_013',
    studentName: 'Isabella Torres Mendoza',
    answers: {},
    answerString: 'ACDBACDBA' + 'A'.repeat(91),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 180000),
    status: 'pending',
  },
  {
    id: '14',
    examId: 'exam_C',
    studentId: 'student_014',
    studentName: 'Sebastián Aguilar Ramos',
    answers: {},
    answerString: 'CXCXCXCXCX' + 'C'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 160000),
    status: 'pending',
  },
  {
    id: '15',
    examId: 'exam_E',
    studentId: 'student_015',
    studentName: 'Camila Jiménez Vargas',
    answers: {},
    answerString: 'EEXEEXEEXE' + 'E'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 140000),
    status: 'pending',
  },
  {
    id: '16',
    examId: 'exam_D',
    studentId: 'student_016',
    studentName: 'Mateo Silva Herrera',
    answers: {},
    answerString: 'DDDXDDDXDD' + 'D'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 120000),
    status: 'pending',
  },
  {
    id: '17',
    examId: 'exam_B',
    studentId: 'student_017',
    studentName: 'Alejandra Morales Cruz',
    answers: {},
    answerString: 'BBXBBXBBXB' + 'B'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 100000),
    status: 'pending',
  },
  {
    id: '18',
    examId: 'exam_A',
    studentId: 'student_018',
    studentName: 'Fernando López García',
    answers: {},
    answerString: 'AABCDEABCD' + 'A'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 80000),
    status: 'pending',
  },
  {
    id: '19',
    examId: 'exam_C',
    studentId: 'student_019',
    studentName: 'Gabriela Quispe Mamani',
    answers: {},
    answerString: 'CCCXCCCXCC' + 'C'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 60000),
    status: 'pending',
  },
  {
    id: '20',
    examId: 'exam_E',
    studentId: 'student_020',
    studentName: 'Ricardo Vargas Mendoza',
    answers: {},
    answerString: 'EEEEXEEEEX' + 'E'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 40000),
    status: 'pending',
  },
  {
    id: '21',
    examId: 'exam_A',
    studentId: 'student_021',
    studentName: 'Natalia Fernández Silva',
    answers: {},
    answerString: 'AXCDAXCDAX' + 'A'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 30000),
    status: 'pending',
  },
  {
    id: '22',
    examId: 'exam_D',
    studentId: 'student_022',
    studentName: 'Óscar Huamán Rojas',
    answers: {},
    answerString: 'DDDDXDDDDD' + 'D'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 25000),
    status: 'pending',
  },
  {
    id: '23',
    examId: 'exam_B',
    studentId: 'student_023',
    studentName: 'Lucía Chávez Paredes',
    answers: {},
    answerString: 'BBBBBXBBBB' + 'B'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 20000),
    status: 'pending',
  },
  {
    id: '24',
    examId: 'exam_C',
    studentId: 'student_024',
    studentName: 'Emilio Ramos Castillo',
    answers: {},
    answerString: 'CXCXCXCXCX' + 'C'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 15000),
    status: 'pending',
  },
  {
    id: '25',
    examId: 'exam_E',
    studentId: 'student_025',
    studentName: 'Daniela Espinoza Torres',
    answers: {},
    answerString: 'EEXEEXEEXE' + 'E'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 10000),
    status: 'pending',
  },
  // 25 exámenes adicionales más
  {
    id: '26',
    examId: 'exam_A',
    studentId: 'student_026',
    studentName: 'Alejandro Mendoza Ruiz',
    answers: {},
    answerString: 'AAXAAXAAXA' + 'A'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 8000),
    status: 'pending',
  },
  {
    id: '27',
    examId: 'exam_B',
    studentId: 'student_027',
    studentName: 'Fernanda Castro López',
    answers: {},
    answerString: 'BBBBXBBBXB' + 'B'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 7500),
    status: 'pending',
  },
  {
    id: '28',
    examId: 'exam_C',
    studentId: 'student_028',
    studentName: 'Rodrigo Vargas Soto',
    answers: {},
    answerString: 'CCCXCCCXCC' + 'C'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 7000),
    status: 'pending',
  },
  {
    id: '29',
    examId: 'exam_D',
    studentId: 'student_029',
    studentName: 'Valentina Herrera Cruz',
    answers: {},
    answerString: 'DDDDDDXDDD' + 'D'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 6500),
    status: 'pending',
  },
  {
    id: '30',
    examId: 'exam_E',
    studentId: 'student_030',
    studentName: 'Nicolás Ramírez Flores',
    answers: {},
    answerString: 'EEEEEEXEEE' + 'E'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 6000),
    status: 'pending',
  },
  {
    id: '31',
    examId: 'exam_A',
    studentId: 'student_031',
    studentName: 'Gabriela Morales Díaz',
    answers: {},
    answerString: 'AXAXAXAXAX' + 'A'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 5500),
    status: 'pending',
  },
  {
    id: '32',
    examId: 'exam_B',
    studentId: 'student_032',
    studentName: 'Martín Silva Guerrero',
    answers: {},
    answerString: 'BXBXBXBXBX' + 'B'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 5000),
    status: 'pending',
  },
  {
    id: '33',
    examId: 'exam_C',
    studentId: 'student_033',
    studentName: 'Luciana Peña Vega',
    answers: {},
    answerString: 'CXCXCXCXCX' + 'C'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 4500),
    status: 'pending',
  },
  {
    id: '34',
    examId: 'exam_D',
    studentId: 'student_034',
    studentName: 'Joaquín Torres Medina',
    answers: {},
    answerString: 'DDDXDDDXDD' + 'D'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 4000),
    status: 'pending',
  },
  {
    id: '35',
    examId: 'exam_E',
    studentId: 'student_035',
    studentName: 'Antonella Rojas Campos',
    answers: {},
    answerString: 'EEXEEXEEXE' + 'E'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 3500),
    status: 'pending',
  },
  {
    id: '36',
    examId: 'exam_A',
    studentId: 'student_036',
    studentName: 'Emilio Castillo Ramos',
    answers: {},
    answerString: 'AAAXAAAXAA' + 'A'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 3000),
    status: 'pending',
  },
  {
    id: '37',
    examId: 'exam_B',
    studentId: 'student_037',
    studentName: 'Renata Jiménez Paredes',
    answers: {},
    answerString: 'BBBXBBBXBB' + 'B'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 2800),
    status: 'pending',
  },
  {
    id: '38',
    examId: 'exam_C',
    studentId: 'student_038',
    studentName: 'Maximiliano Núñez Ortega',
    answers: {},
    answerString: 'CCCCCXCCCC' + 'C'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 2600),
    status: 'pending',
  },
  {
    id: '39',
    examId: 'exam_D',
    studentId: 'student_039',
    studentName: 'Isadora Vásquez Luna',
    answers: {},
    answerString: 'DDXDDXDDXD' + 'D'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 2400),
    status: 'pending',
  },
  {
    id: '40',
    examId: 'exam_E',
    studentId: 'student_040',
    studentName: 'Benjamín Sánchez Moreno',
    answers: {},
    answerString: 'EEEEEXEEEE' + 'E'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 2200),
    status: 'pending',
  },
  {
    id: '41',
    examId: 'exam_A',
    studentId: 'student_041',
    studentName: 'Camila Delgado Ríos',
    answers: {},
    answerString: 'AXAAXAAXAA' + 'A'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 2000),
    status: 'pending',
  },
  {
    id: '42',
    examId: 'exam_B',
    studentId: 'student_042',
    studentName: 'Leonardo Espinoza Chávez',
    answers: {},
    answerString: 'BXBXBXBXBX' + 'B'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 1800),
    status: 'pending',
  },
  {
    id: '43',
    examId: 'exam_C',
    studentId: 'student_043',
    studentName: 'Valeria Aguilar Mendoza',
    answers: {},
    answerString: 'CXCXCXCXCX' + 'C'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 1600),
    status: 'pending',
  },
  {
    id: '44',
    examId: 'exam_D',
    studentId: 'student_044',
    studentName: 'Santiago Romero Fuentes',
    answers: {},
    answerString: 'DDDDDXDDDD' + 'D'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 1400),
    status: 'pending',
  },
  {
    id: '45',
    examId: 'exam_E',
    studentId: 'student_045',
    studentName: 'Ariana Gutiérrez Salinas',
    answers: {},
    answerString: 'EEXEEXEEXE' + 'E'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 1200),
    status: 'pending',
  },
  {
    id: '46',
    examId: 'exam_A',
    studentId: 'student_046',
    studentName: 'Matías Herrera Villalobos',
    answers: {},
    answerString: 'AAAAXAAAAX' + 'A'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 1000),
    status: 'pending',
  },
  {
    id: '47',
    examId: 'exam_B',
    studentId: 'student_047',
    studentName: 'Constanza Morales Ibarra',
    answers: {},
    answerString: 'BBBBBBXBBB' + 'B'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 900),
    status: 'pending',
  },
  {
    id: '48',
    examId: 'exam_C',
    studentId: 'student_048',
    studentName: 'Ignacio Fernández Cortés',
    answers: {},
    answerString: 'CCCXCCCXCC' + 'C'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 800),
    status: 'pending',
  },
  {
    id: '49',
    examId: 'exam_D',
    studentId: 'student_049',
    studentName: 'Florencia Vargas Peña',
    answers: {},
    answerString: 'DDXDDXDDXD' + 'D'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 700),
    status: 'pending',
  },
  {
    id: '50',
    examId: 'exam_E',
    studentId: 'student_050',
    studentName: 'Tomás Castillo Guerrero',
    answers: {},
    answerString: 'EEEEEEEXEE' + 'E'.repeat(90),
    score: 0,
    startTime: new Date(Date.now() - 3600000),
    endTime: new Date(Date.now() - 600),
    status: 'pending',
  },
];

// Funciones para gestionar intentos de examen
export const getExamAttemptById = (id: string): ExamAttempt | undefined => {
  return examAttempts.find(attempt => attempt.id === id);
};

export const getExamAttemptsByStudent = (studentId: string): ExamAttempt[] => {
  return examAttempts.filter(attempt => attempt.studentId === studentId);
};

export const getExamAttemptsByExam = (examId: string): ExamAttempt[] => {
  return examAttempts.filter(attempt => attempt.examId === examId);
};

export const getPendingExamAttempts = (): ExamAttempt[] => {
  return examAttempts.filter(attempt => attempt.status === 'pending');
};

export const getCompletedExamAttempts = (): ExamAttempt[] => {
  return examAttempts.filter(attempt => attempt.status === 'completed' || attempt.status === 'evaluated');
};

export const addExamAttempt = (attempt: ExamAttempt): void => {
  examAttempts.push(attempt);
};

export const updateExamAttempt = (id: string, updates: Partial<ExamAttempt>): boolean => {
  const index = examAttempts.findIndex(attempt => attempt.id === id);
  if (index !== -1) {
    examAttempts[index] = { ...examAttempts[index], ...updates };
    return true;
  }
  return false;
};

export const deleteExamAttempt = (id: string): boolean => {
  const index = examAttempts.findIndex(attempt => attempt.id === id);
  if (index !== -1) {
    examAttempts.splice(index, 1);
    return true;
  }
  return false;
};

export const getAllExamAttempts = (): ExamAttempt[] => {
  return [...examAttempts];
};

export const removeProcessedAttempts = (processedIds: string[]): void => {
  processedIds.forEach(id => {
    const index = examAttempts.findIndex(attempt => attempt.id === id);
    if (index !== -1) {
      examAttempts.splice(index, 1);
    }
  });
};